<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Google SRE 读书笔记 -- 分布式系统的监控</title>
      <link href="/posts/e77168f6653bb6b9.html"/>
      <url>/posts/e77168f6653bb6b9.html</url>
      
        <content type="html"><![CDATA[<h5 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h5><ul><li>收集、处理、汇总，并且显示关于某个系统的实时量化数据，例如请求的数量和数据，错误的数量和类型，以及处理用时，应用服务器的存活时间等。</li></ul><h5 id="白盒监控"><a href="#白盒监控" class="headerlink" title="白盒监控"></a>白盒监控</h5><ul><li>依靠系统内部暴露的一些性能指标进行监控。包括日志分析、java虚拟机提供的监控接口，或者一个列出内部统计数据的HTTP接口进行监控。</li></ul><h5 id="黑盒监控"><a href="#黑盒监控" class="headerlink" title="黑盒监控"></a>黑盒监控</h5><ul><li>通过测试某种外部用户课件的系统行为进行监控。</li></ul><h5 id="监控台页面"><a href="#监控台页面" class="headerlink" title="监控台页面"></a>监控台页面</h5><ul><li>提供某个服务核心指标一览服务的应用程序;</li><li>该程序提供：主要是真是指标，也额外包含一些过滤、选择等功能;</li><li>也可以显示相应团队的一些信息：<ul><li>目前工单的数量</li><li>高优先级的Bug列表</li><li>目前的on-call工程师和最近进行的生产发布</li></ul></li></ul><h5 id="警报"><a href="#警报" class="headerlink" title="警报"></a>警报</h5><ul><li>目标对象是某个人发现某个系统地址的一个通知</li><li>通知类型可包括：<ul><li>工单系统</li><li>E-mail地址</li><li>传呼机</li></ul></li><li>警报类型分类：<ul><li>工单</li><li>E-mail警报（warn）</li><li>紧急警报（page）</li></ul></li></ul><h5 id="监控的目的"><a href="#监控的目的" class="headerlink" title="监控的目的"></a>监控的目的</h5><ul><li>分析长期趋势<ul><li>数据库数量</li><li>增长速度</li><li>月活用户增长趋势</li></ul></li><li>跨时间范围比较，或者观察不同组之间的区别</li><li>预测即将发生的问题，发出警告</li><li>报警某项出现了故障，需要有人立即修复</li></ul><h5 id="对监控设置一些合理预期"><a href="#对监控设置一些合理预期" class="headerlink" title="对监控设置一些合理预期"></a>对监控设置一些合理预期</h5><ul><li><strong>简单快速</strong>的监控系统 + <strong>高效</strong>的分析工具；</li><li>监控系统规则<strong>越简单越好</strong>，应该非常<strong>容易理解</strong>；</li><li>监控规则可以检测某个非常简单、具体，但是严重的异常情况；</li><li>减少监控的<strong>复杂依赖关系</strong>：<ul><li>最好多花一些时间监控现象，而不是原因；针对原因，应该只监控那些非常确定的和非常明确的原因；</li></ul></li><li>能解决<strong>长尾问题</strong>；</li><li>度量指标采用<strong>合理的精度</strong>。</li></ul><h5 id="监控控制台四个黄金指标"><a href="#监控控制台四个黄金指标" class="headerlink" title="监控控制台四个黄金指标"></a>监控控制台四个黄金指标</h5><ul><li>延迟<ul><li>处理某个请求所需要的时间</li></ul></li><li>流量<ul><li>使用系统中的某个高层次的指标针对系统负载需求所进行的度量</li></ul></li><li>错误<ul><li>请求失败的速率</li></ul></li><li>饱和度<ul><li>服务器容量有都“满”</li><li>需要有预测报警，例如在几小时之后会填满硬盘</li></ul></li></ul><h5 id="上述理念进行整合"><a href="#上述理念进行整合" class="headerlink" title="上述理念进行整合"></a>上述理念进行整合</h5><ul><li>以上理念整合起来，可能就会比较复杂了，可以通过以下规则进行精简，目的还是要追求满足监控目的情况下的<strong>简单，高效</strong><ul><li>该规则是否能检测到一个目前检测不到的、紧急的、有操作性的，并且即将发生的或已经发生的用户可见故障</li><li>是否可以忽略这条警报？什么情况下可能会导致用户忽略这条警报，如何避免？</li><li>这条警报是否确实显示了用户正在受到影响？是否存在用户没有受到影响也可以触发这条规则的情况？例如测试环境或系统维护状态下发出的警报是否应该被过滤掉？</li><li>收到报警后，是否要进行某个操作？是否要立即执行，还是等到第二天早晨执行？该操作是否可以被安全的自动化？该操作的效果是长期的，还是短期的？</li></ul></li><li>以上这些问题，反映了应对报警的一些层次的理念：<ul><li>每当收到紧急警报试，应该立即需要我进行某种操作。每天只能进入紧急状态几次，太多就会导致“狼来了”的效应；</li><li>每个紧急警报都应该是可以具体操作的；</li><li>每个紧急警报的回复都应该需要某种智力分析过程，如果某个紧急警报只是需要一个固定的机械动作，那么太久不应该成为紧急的警报；</li><li>每个紧急警报都应该是关于某个新问题的，不应该彼此重叠；</li></ul></li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>健康的监控系统应该是非常简单、易于理解的；</li><li>紧急报警应该关注于现象；</li><li>监控的技术栈层面越高，监控现象越容易；</li><li>对于所有报警都通过e-mail等发送，很容易变成噪声。我们应该更倾向于构建一个良好的监控台页面，直接显示所有的非紧急异常情况；</li><li>长远来看，要建立一个成功的on-call轮值体系，以及构建一个稳定的产品需要选择那些正在发生和即将发生的问题来进行报警，设置一个可以实际达到的合理目标，保证监控系统可以支持快速的定位与检测。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Google SRE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google SRE </tag>
            
            <tag> 分布式系统监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openvpn部署与配置</title>
      <link href="/posts/8568f93a02d542c8.html"/>
      <url>/posts/8568f93a02d542c8.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现。和传统 VPN 相比，它的优点是简单易用。 </li><li>OpenVPN允许参与建立VPN的单点使用共享金钥，电子证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库中的SSLv3/TLSv1 协议函式库。OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Windows 2000/XP/Vista上运行，并包含了许多安全性的功能。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。</li></ul></blockquote><p>1、apt安装openvpn和easy-rsa，easy-rsa是制作证书的工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># sudo apt-get update</span></span><br><span class="line">root@ubuntu:~<span class="comment"># sudo apt-get install openvpn easy-rsa</span></span><br></pre></td></tr></table></figure><p>2、创建用来制作和存储用户证书的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># make-cadir ~/openvpn-ca</span></span><br></pre></td></tr></table></figure><p>3、修改/root/openvpn-ca/vars 配置,找到相应配置项，修改值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KEY_COUNTRY=<span class="string">"CN"</span></span><br><span class="line"><span class="built_in">export</span> KEY_PROVINCE=<span class="string">"BJ"</span></span><br><span class="line"><span class="built_in">export</span> KEY_CITY=<span class="string">"HD"</span></span><br><span class="line"><span class="built_in">export</span> KEY_ORG=<span class="string">"MADBLOG"</span></span><br><span class="line"><span class="built_in">export</span> KEY_EMAIL=<span class="string">"madking@madblog.cn"</span></span><br><span class="line"><span class="built_in">export</span> KEY_OU=<span class="string">"DevOps"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># X509 Subject Field</span></span><br><span class="line"><span class="built_in">export</span> KEY_NAME=<span class="string">"server"</span></span><br></pre></td></tr></table></figure><p>4、加载vars配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># source vars</span></span><br></pre></td></tr></table></figure></p><p>5、制作CA证书，一路回车<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># ./clean-all</span></span><br><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># ./build-ca</span></span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">...............................+++</span><br><span class="line">.....................................+++</span><br><span class="line">writing new private key to <span class="string">'ca.key'</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [CN]:</span><br><span class="line">State or Province Name (full name) [BJ]:</span><br><span class="line">Locality Name (eg, city) [HD]:</span><br><span class="line">Organization Name (eg, company) [MADBLOG]:</span><br><span class="line">Organizational Unit Name (eg, section) [DevOps]:</span><br><span class="line">Common Name (eg, your name or your server<span class="string">'s hostname) [MADBLOG CA]:</span></span><br><span class="line"><span class="string">Name [server]:</span></span><br><span class="line"><span class="string">Email Address [madking@madblog.cn]:</span></span><br></pre></td></tr></table></figure></p><p>6、服务端生成证书和私钥，一路回车，最后两部输入 y 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># ./build-key-server server</span></span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">...+++</span><br><span class="line">.........................+++</span><br><span class="line">writing new private key to <span class="string">'server.key'</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [CN]:</span><br><span class="line"></span><br><span class="line">State or Province Name (full name) [BJ]:Locality Name (eg, city) [HD]:</span><br><span class="line">Organization Name (eg, company) [MADBLOG]:</span><br><span class="line">Organizational Unit Name (eg, section) [DevOps]:</span><br><span class="line">Common Name (eg, your name or your server<span class="string">'s hostname) [server]:</span></span><br><span class="line"><span class="string">Name [server]:</span></span><br><span class="line"><span class="string">Email Address [madking@madblog.cn]:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please enter the following '</span>extra<span class="string">' attributes</span></span><br><span class="line"><span class="string">to be sent with your certificate request</span></span><br><span class="line"><span class="string">A challenge password []:</span></span><br><span class="line"><span class="string">An optional company name []:</span></span><br><span class="line"><span class="string">Using configuration from /root/openvpn-ca/openssl-1.0.0.cnf</span></span><br><span class="line"><span class="string">Check that the request matches the signature</span></span><br><span class="line"><span class="string">Signature ok</span></span><br><span class="line"><span class="string">The Subject'</span>s Distinguished Name is as follows</span><br><span class="line">countryName           :PRINTABLE:<span class="string">'CN'</span></span><br><span class="line">stateOrProvinceName   :PRINTABLE:<span class="string">'BJ'</span></span><br><span class="line">localityName          :PRINTABLE:<span class="string">'HD'</span></span><br><span class="line">organizationName      :PRINTABLE:<span class="string">'MADBLOG'</span></span><br><span class="line">organizationalUnitName:PRINTABLE:<span class="string">'DevOps'</span></span><br><span class="line">commonName            :PRINTABLE:<span class="string">'server'</span></span><br><span class="line">name                  :PRINTABLE:<span class="string">'server'</span></span><br><span class="line">emailAddress          :IA5STRING:<span class="string">'madking@madblog.cn'</span></span><br><span class="line">Certificate is to be certified until Oct  9 03:47:19 2029 GMT (3650 days)</span><br><span class="line">Sign the certificate? [y/n]:y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 out of 1 certificate requests certified, commit? [y/n]y</span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure></p><p>7、生成 Diffie Hellman 参数</p><ul><li>必须为OpenVPN服务端生成 Diffie Hellman 参数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># ./build-dh</span></span><br><span class="line">Generating DH parameters, 2048 bit long safe prime, generator 2</span><br><span class="line">This is going to take a long time</span><br><span class="line">..................................+.................................................................++*++*</span><br></pre></td></tr></table></figure><p>8、将/root/openvpn-ca/keys软连接到/etc/openvpn/</p><p>9、生成ta.key文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># openvpn --genkey --secret /etc/openvpn/keys/ta.key</span></span><br></pre></td></tr></table></figure><p>10、拷贝配置文件模板，解压后修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:/etc/openvpn<span class="comment"># vim server.conf</span></span><br></pre></td></tr></table></figure><ul><li>修改后内容如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> 0.0.0.0</span><br><span class="line">port 443</span><br><span class="line">proto tcp</span><br><span class="line">;proto udp</span><br><span class="line">;dev tap</span><br><span class="line">dev tun</span><br><span class="line">;dev-node MyTap</span><br><span class="line">ca /etc/openvpn/keys/ca.crt</span><br><span class="line">cert /etc/openvpn/keys/server.crt</span><br><span class="line">key /etc/openvpn/keys/server.key  <span class="comment"># This file should be kept secret</span></span><br><span class="line">dh /etc/openvpn/keys/dh2048.pem</span><br><span class="line">;topology subnet</span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line">;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100</span><br><span class="line">;server-bridge</span><br><span class="line">push <span class="string">"route 10.0.0.0 255.0.0.0"</span></span><br><span class="line">;push <span class="string">"route 172.16.0.0 255.240.0.0 vpn_gateway"</span></span><br><span class="line">;push <span class="string">"route 192.168.10.0 255.255.255.0"</span></span><br><span class="line">;push <span class="string">"route 192.168.20.0 255.255.255.0"</span></span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route 192.168.40.128 255.255.255.248</span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route 10.9.0.0 255.255.255.252</span><br><span class="line">;route 172.16.0.0 255.240.0.0 10.25.203.247</span><br><span class="line">;learn-address ./script</span><br><span class="line">;push <span class="string">"redirect-gateway def1 bypass-dhcp"</span></span><br><span class="line">;push <span class="string">"dhcp-option DNS 8.8.8.8"</span></span><br><span class="line">;push <span class="string">"dhcp-option DNS 114.114.114.114"</span></span><br><span class="line">;client-to-client</span><br><span class="line">duplicate-cn</span><br><span class="line">keepalive 10 120</span><br><span class="line">tls-auth /etc/openvpn/keys/ta.key 0 <span class="comment"># This file is secret</span></span><br><span class="line">cipher BF-CBC        <span class="comment"># Blowfish (default)</span></span><br><span class="line">;cipher AES-128-CBC   <span class="comment"># AES</span></span><br><span class="line">;cipher DES-EDE3-CBC  <span class="comment"># Triple-DES</span></span><br><span class="line">comp-lzo</span><br><span class="line">;max-clients 100</span><br><span class="line">user nobody</span><br><span class="line">group nogroup</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">status openvpn-status.log</span><br><span class="line"><span class="built_in">log</span>         /var/<span class="built_in">log</span>/openvpn.log</span><br><span class="line"><span class="built_in">log</span>-append  /var/<span class="built_in">log</span>/openvpn.log</span><br><span class="line">verb 3</span><br><span class="line">;mute 20</span><br></pre></td></tr></table></figure><p>11、开启ip转发功能，编辑/etc/sysctl.conf,修改net.ipv4.ip_forward为1<br>root@ubuntu:/etc/openvpn# vim /etc/sysctl.conf<br>root@ubuntu:/etc/openvpn# sysctl -p<br>net.ipv4.ip_forward = 1</p><p>12、启动openvpn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># /etc/init.d/openvpn start</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># /usr/sbin/openvpn --daemon ovpn-server --status /run/openvpn/server.status 10 --cd /etc/openvpn --script-security 2 --config /etc/openvpn/server.conf --writepid /run/openvpn/server.pid</span></span><br></pre></td></tr></table></figure><p>13、检查端口是否启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># netstat -ntlp | grep '0.0.0.0:443'</span></span><br><span class="line">tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      14330/openvpn</span><br></pre></td></tr></table></figure><p>14、给用户申请证书 ./build-key madking</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># cd /root/openvpn-ca/</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># source vars</span></span><br><span class="line">NOTE: If you run ./clean-all, I will be doing a rm -rf on /root/openvpn-ca/keys</span><br><span class="line"></span><br><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># ./build-key madking</span></span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">..................................................................+++</span><br><span class="line">.....................+++</span><br><span class="line">writing new private key to <span class="string">'madking.key'</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [CN]:</span><br><span class="line">State or Province Name (full name) [BJ]:</span><br><span class="line">Locality Name (eg, city) [HD]:</span><br><span class="line">Organization Name (eg, company) [MADBLOG]:</span><br><span class="line">Organizational Unit Name (eg, section) [DevOps]:</span><br><span class="line">Common Name (eg, your name or your server<span class="string">'s hostname) [madking]:</span></span><br><span class="line"><span class="string">Name [server]:</span></span><br><span class="line"><span class="string">Email Address [madking@madblog.cn]:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please enter the following '</span>extra<span class="string">' attributes</span></span><br><span class="line"><span class="string">to be sent with your certificate request</span></span><br><span class="line"><span class="string">A challenge password []:</span></span><br><span class="line"><span class="string">An optional company name []:</span></span><br><span class="line"><span class="string">Using configuration from /root/openvpn-ca/openssl-1.0.0.cnf</span></span><br><span class="line"><span class="string">Check that the request matches the signature</span></span><br><span class="line"><span class="string">Signature ok</span></span><br><span class="line"><span class="string">The Subject'</span>s Distinguished Name is as follows</span><br><span class="line">countryName           :PRINTABLE:<span class="string">'CN'</span></span><br><span class="line">stateOrProvinceName   :PRINTABLE:<span class="string">'BJ'</span></span><br><span class="line">localityName          :PRINTABLE:<span class="string">'HD'</span></span><br><span class="line">organizationName      :PRINTABLE:<span class="string">'MADBLOG'</span></span><br><span class="line">organizationalUnitName:PRINTABLE:<span class="string">'DevOps'</span></span><br><span class="line">commonName            :PRINTABLE:<span class="string">'madking'</span></span><br><span class="line">name                  :PRINTABLE:<span class="string">'server'</span></span><br><span class="line">emailAddress          :IA5STRING:<span class="string">'madking@madblog.cn'</span></span><br><span class="line">Certificate is to be certified until Oct  9 04:56:29 2029 GMT (3650 days)</span><br><span class="line">Sign the certificate? [y/n]:y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 out of 1 certificate requests certified, commit? [y/n]y</span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure><p>15、注销用户的证书 ./revoke-full madking</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># cd /root/openvpn-ca/</span></span><br><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># source vars</span></span><br><span class="line">root@ubuntu:~/openvpn-ca<span class="comment"># ./revoke-full madking</span></span><br><span class="line">Using configuration from /root/openvpn-ca/openssl-1.0.0.cnf</span><br><span class="line">Revoking Certificate 02.</span><br><span class="line">Data Base Updated</span><br><span class="line">Using configuration from /root/openvpn-ca/openssl-1.0.0.cnf</span><br><span class="line">madking.crt: C = CN, ST = BJ, L = HD, O = MADBLOG, OU = DevOps, CN = madking, name = server, emailAddress = madking@madblog.cn</span><br><span class="line">error 23 at 0 depth lookup:certificate revoked</span><br></pre></td></tr></table></figure><ul><li>执行完后就会生成：/etc/openvpn/keys/crl.pem</li><li>改名字crl.pem 为 madking.pem </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># cd /root/openvpn-ca/keys</span></span><br><span class="line">root@ubuntu:~<span class="comment"># mv crl.pem madking.pem</span></span><br></pre></td></tr></table></figure><ul><li>将/root/openvpn-ca/keys/madking.pem 记录到配置文件中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'crl-verify /root/openvpn-ca/keys/madking.pem'</span> &gt;&gt; /etc/openvpn/server.conf</span><br></pre></td></tr></table></figure><p>16、客户端配置<br>拷贝文件<br>madking.crt<br>ca.crt<br>madking.key<br>ta.key</p><p>配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto tcp</span><br><span class="line">remote 192.168.3.179</span><br><span class="line">port 443</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line">ca ./ca.crt</span><br><span class="line">cert ./madking.crt</span><br><span class="line">key ./madking.key</span><br><span class="line">tls-auth ./ta.key 1</span><br><span class="line">comp-lzo yes</span><br><span class="line">verb 3</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sed </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb副本集的分库与恢复操作</title>
      <link href="/posts/e6d7c5c3586abd73.html"/>
      <url>/posts/e6d7c5c3586abd73.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mongodb的维护工作中经常有分库的操作，需要将一个副本集集群拆分为两个，操作步骤一般是先扩展两个副本节点，然后再把这两个几点从旧集群中拆分出去，组成新的集群，然后删减多余的数据。"><a href="#Mongodb的维护工作中经常有分库的操作，需要将一个副本集集群拆分为两个，操作步骤一般是先扩展两个副本节点，然后再把这两个几点从旧集群中拆分出去，组成新的集群，然后删减多余的数据。" class="headerlink" title="Mongodb的维护工作中经常有分库的操作，需要将一个副本集集群拆分为两个，操作步骤一般是先扩展两个副本节点，然后再把这两个几点从旧集群中拆分出去，组成新的集群，然后删减多余的数据。"></a>Mongodb的维护工作中经常有分库的操作，需要将一个副本集集群拆分为两个，操作步骤一般是先扩展两个副本节点，然后再把这两个几点从旧集群中拆分出去，组成新的集群，然后删减多余的数据。</h2><h3 id="拆分为两个集群"><a href="#拆分为两个集群" class="headerlink" title="拆分为两个集群"></a>拆分为两个集群</h3><ul><li><strong>配置文件：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat mongod_46000.conf</span></span><br><span class="line">[program:mongod_46000]</span><br><span class="line">command=/usr/bin/mongod --wiredTigerDirectoryForIndexes --dbpath /data/mongodb/test_db_46000/ --port 46000 --maxConns 4000  --quiet --logappend --logpath /data/server/logs_tmp/logs/testdb_46000.log --directoryperdb --auth --nojournal --oplogSize 1000 --replSet db_test_46000 --keyFile=/data/mongodb/test_db_46000.key --setParameter replWriterThreadCount=32</span><br><span class="line">user=root</span><br><span class="line">stderr_logfile = /var/log/supervisor/mongod_46000_err.log</span><br><span class="line">stdout_logfile = /var/log/supervisor/mongod_46000_stdout.log</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat mongod_59000.single.conf.bak</span></span><br><span class="line">[program:mongod_59000]</span><br><span class="line">command=/usr/bin/mongod --wiredTigerDirectoryForIndexes --dbpath /data/mongodb/test_new_db_59000/ --port 59000 --maxConns 4000  --quiet --logappend --logpath /data/server/logs_tmp/logs/testdb_59000.log --directoryperdb --nojournal --oplogSize 1000 --setParameter replWriterThreadCount=32</span><br><span class="line">user=root</span><br><span class="line">stderr_logfile = /var/log/supervisor/mongod_59000_err.log</span><br><span class="line">stdout_logfile = /var/log/supervisor/mongod_59000_stdout.log</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat mongod_59000.repl.conf.bak</span></span><br><span class="line">[program:mongod_59000]</span><br><span class="line">command=/usr/bin/mongod --wiredTigerDirectoryForIndexes --dbpath /data/mongodb/test_new_db_59000/ --port 59000 --maxConns 4000  --quiet --logappend --logpath /data/server/logs_tmp/logs/testdb_59000.log --directoryperdb --auth --nojournal --oplogSize 1000 --replSet db_new_test_59000 --keyFile=/data/mongodb/test_new_db_59000.key --setParameter replWriterThreadCount=32</span><br><span class="line">user=root</span><br><span class="line">stderr_logfile = /var/log/supervisor/mongod_59000_err.log</span><br><span class="line">stdout_logfile = /var/log/supervisor/mongod_59000_stdout.log</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br></pre></td></tr></table></figure><ul><li><strong>在ansible机器上执行：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 'rs.remove("db-3.testdb.cn:46000")' | mongo mongodb://user:password@192.168.1.3:46000/admin</span><br><span class="line">echo 'rs.remove("db-4.testdb.cn:46000")' | mongo mongodb://user:password@192.168.1.3:46000/admin</span><br></pre></td></tr></table></figure><ul><li><strong>在两台db-new上执行，开广播一起执行：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/supervisor/conf.d/mongod_46000.conf /etc/supervisor/conf.d/mongod_46000.conf.bak</span><br><span class="line">mv /etc/supervisor/conf.d/mongod_59000.single.conf.bak /etc/supervisor/conf.d/mongod_59000.conf</span><br><span class="line">supervisorctl stop all</span><br></pre></td></tr></table></figure><ul><li><strong>等待都停止完成</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">umount /data/mongodb/test_db_46000</span><br><span class="line">mv /data/mongodb/test_db_46000 /data/mongodb/test_new_db_59000/</span><br><span class="line">mount /dev/vdb1 /data/mongodb/test_new_db_59000/</span><br><span class="line">mv /data/mongodb/test_db_46000.key /data/mongodb/test_new_db_59000.key</span><br><span class="line">supervisorctl update</span><br><span class="line">supervisorctl start all</span><br></pre></td></tr></table></figure><ul><li><strong>等待都启动完成</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 59000</span><br><span class="line">use local</span><br><span class="line">cfg=&#123;</span><br><span class="line">    "_id" : "db_new_test_59000",</span><br><span class="line">    "version" : 1,</span><br><span class="line">    "protocolVersion" : NumberLong(1),</span><br><span class="line">    "members" : [</span><br><span class="line">        &#123;</span><br><span class="line">            "_id" : 1,</span><br><span class="line">            "host" : "db-new-0.testdb.cn:59000",</span><br><span class="line">            "arbiterOnly" : false,</span><br><span class="line">            "buildIndexes" : true,</span><br><span class="line">            "hidden" : false,</span><br><span class="line">            "priority" : 20,</span><br><span class="line">            "tags" : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            "slaveDelay" : NumberLong(0),</span><br><span class="line">            "votes" : 1</span><br><span class="line">        &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "_id" : 2,</span><br><span class="line">      "host" : "db-new-1.testdb.cn:59000",</span><br><span class="line">      "arbiterOnly" : false,</span><br><span class="line">      "buildIndexes" : true,</span><br><span class="line">      "hidden" : false,</span><br><span class="line">      "priority" : 10,</span><br><span class="line">      "tags" : &#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      "slaveDelay" : NumberLong(0),</span><br><span class="line">      "votes" : 1</span><br><span class="line">    &#125;</span><br><span class="line">    ],</span><br><span class="line">    "settings" : &#123;</span><br><span class="line">        "chainingAllowed" : true,</span><br><span class="line">        "heartbeatIntervalMillis" : 2000,</span><br><span class="line">        "heartbeatTimeoutSecs" : 10,</span><br><span class="line">        "electionTimeoutMillis" : 10000,</span><br><span class="line">        "getLastErrorModes" : &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        "getLastErrorDefaults" : &#123;</span><br><span class="line">            "w" : 1,</span><br><span class="line">            "wtimeout" : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        "replicaSetId" : ObjectId("5a53790d3c33f4cb9f44ca3c")</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">db.system.replset.save(cfg)</span><br><span class="line">db.system.replset.remove(&#123;"_id" : "db_test_46000"&#125;)</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">mv /etc/supervisor/conf.d/mongod_59000.conf /etc/supervisor/conf.d/mongod_59000.single.conf.bak</span><br><span class="line">mv /etc/supervisor/conf.d/mongod_59000.repl.conf.bak /etc/supervisor/conf.d/mongod_59000.conf</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><h3 id="恢复到一个集群"><a href="#恢复到一个集群" class="headerlink" title="恢复到一个集群"></a>恢复到一个集群</h3><ul><li><strong>在db-new上执行，修改配置文件，mongodb以单点启动</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/supervisor/conf.d/mongod_59000.conf /etc/supervisor/conf.d/mongod_59000.repl.conf.bak</span><br><span class="line">mv /etc/supervisor/conf.d/mongod_59000.single.conf.bak /etc/supervisor/conf.d/mongod_59000.conf</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><ul><li><strong>配置更新后，等待重启完成，执行指令</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 59000</span><br><span class="line">use local</span><br><span class="line">cfg=&#123;</span><br><span class="line">    "_id" : "db_test_46000",</span><br><span class="line">    "version" : 20,</span><br><span class="line">    "protocolVersion" : NumberLong(1),</span><br><span class="line">    "members" : [</span><br><span class="line">        &#123;</span><br><span class="line">            "_id" : 1,</span><br><span class="line">            "host" : "db-0.testdb.cn:46000",</span><br><span class="line">            "arbiterOnly" : false,</span><br><span class="line">            "buildIndexes" : true,</span><br><span class="line">            "hidden" : false,</span><br><span class="line">            "priority" : 20,</span><br><span class="line">            "tags" : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            "slaveDelay" : NumberLong(0),</span><br><span class="line">            "votes" : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            "_id" : 2,</span><br><span class="line">            "host" : "db-1.testdb.cn:46000",</span><br><span class="line">            "arbiterOnly" : false,</span><br><span class="line">            "buildIndexes" : true,</span><br><span class="line">            "hidden" : false,</span><br><span class="line">            "priority" : 10,</span><br><span class="line">            "tags" : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            "slaveDelay" : NumberLong(0),</span><br><span class="line">            "votes" : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            "_id" : 3,</span><br><span class="line">            "host" : "db-h.testdb.cn:46000",</span><br><span class="line">            "arbiterOnly" : false,</span><br><span class="line">            "buildIndexes" : true,</span><br><span class="line">            "hidden" : true,</span><br><span class="line">            "priority" : 0,</span><br><span class="line">            "tags" : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            "slaveDelay" : NumberLong(43200),</span><br><span class="line">            "votes" : 1</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "settings" : &#123;</span><br><span class="line">        "chainingAllowed" : true,</span><br><span class="line">        "heartbeatIntervalMillis" : 2000,</span><br><span class="line">        "heartbeatTimeoutSecs" : 10,</span><br><span class="line">        "electionTimeoutMillis" : 10000,</span><br><span class="line">        "getLastErrorModes" : &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        "getLastErrorDefaults" : &#123;</span><br><span class="line">            "w" : 1,</span><br><span class="line">            "wtimeout" : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        "replicaSetId" : ObjectId("5a53790d3c33f4cb9f44ca3c")</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">db.system.replset.save(cfg)</span><br><span class="line">db.system.replset.remove(&#123;"_id" : "db_new_test_59000"&#125;)</span><br><span class="line">exit</span><br><span class="line">mv /etc/supervisor/conf.d/mongod_59000.conf /etc/supervisor/conf.d/mongod_59000.single.conf.bak</span><br><span class="line">mv /etc/supervisor/conf.d/mongod_46000.conf.bak /etc/supervisor/conf.d/mongod_46000.conf</span><br><span class="line"></span><br><span class="line">supervisorctl stop all</span><br><span class="line"></span><br><span class="line">umount /data/mongodb/test_new_db_59000/</span><br><span class="line">mv /data/mongodb/test_new_db_59000 /data/mongodb/test_db_46000</span><br><span class="line">mount /dev/vdb1 /data/mongodb/test_db_46000</span><br><span class="line">mv /data/mongodb/test_new_db_59000.key /data/mongodb/test_db_46000.key</span><br><span class="line">supervisorctl update</span><br><span class="line">supervisorctl start all</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><ul><li><strong>在ansible机器上执行</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 'rs.add("db-3.testdb.cn:46000")' | mongo mongodb://user:password@192.168.1.3:46000/admin</span><br><span class="line">echo 'rs.add("db-4.testdb.cn:46000")' | mongo mongodb://user:password@192.168.1.3:46000/admin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 通过rdb文件分析内存</title>
      <link href="/posts/ed64ad4a32f60d5f.html"/>
      <url>/posts/ed64ad4a32f60d5f.html</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><strong>Redis Cluster</strong>偶尔会有node节点内存分配不均，内存使用高的节点比其他节点高出近一倍的内存使用，这中情况一般也伴随着<strong>Max RT</strong>、<strong>Average RT</strong>飙升到十几秒，后端日志中也会有大量的<strong>read/write redis timeout</strong>。</p><p><strong>为了不影响线上</strong>，可以使用<strong>bgsave</strong>生成 dump.rdb 文件，再结合 redis-rdb-tools 和 sqlite 来进行静态分析。该方法简单实用，而且<strong>不会影响线上redis的使用</strong>。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="1-安装rdbtools"><a href="#1-安装rdbtools" class="headerlink" title="1. 安装rdbtools"></a>1. 安装rdbtools</h4><ul><li>检查python版本是否为2.7</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python  -V</span></span><br><span class="line">Python 2.7.12</span><br></pre></td></tr></table></figure><ul><li>更新升级pip</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pip install --upgrade pip</span></span><br></pre></td></tr></table></figure><ul><li>安装rdbtools</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pip install rdbtools</span></span><br></pre></td></tr></table></figure><h4 id="2-安装sqlite3"><a href="#2-安装sqlite3" class="headerlink" title="2. 安装sqlite3"></a>2. 安装sqlite3</h4><ul><li>ubuntu</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install sqlite3</span><br></pre></td></tr></table></figure><ul><li><p>centos</p><ul><li><p>下载sqlite源码包,解压，编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget https://www.sqlite.org/2019/sqlite-autoconf-3280000.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar xvzf sqlite-autoconf-3280000.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> sqlite-autoconf-3280000</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></li><li><p>安装sqlite-devel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install sqlite-devel</span></span><br></pre></td></tr></table></figure></li><li><p>查看sqlite3是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sqlite3 --version</span></span><br><span class="line">3.7.17 2013-05-20 00:56:22 118a3b35693b134d56ebd780123b7fd6f1497668</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sqlite3</span></span><br><span class="line">SQLite version 3.7.17 2013-05-20 00:56:22</span><br><span class="line">Enter ".help" for instructions</span><br><span class="line">Enter SQL statements terminated with a ";"</span><br><span class="line"><span class="meta">sqlite&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-创建rdb文件"><a href="#3-创建rdb文件" class="headerlink" title="3. 创建rdb文件"></a>3. 创建rdb文件</h4><ul><li>如果redis有打开rdb方式的持久化，可以直接使用该rdb文件，保险起见，也可以先检查下rdb文件更新的日期。</li><li>如果没有打开rdb持久化，则需要使用指令bgsave，生成一份rdb文件。 </li><li>bgsave方式创建rdb文件，系统会fork出一个redis进程来处理save数据，fork前和fork过程中都需要关注下cpu和内存资源使用情况。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis-cli -a password -h host -p port</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> bgsave</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 4. 使用redis-rdb-tools生成内存报告</span></span></span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> rdb -c memory redis.rdb &gt; memory.csv</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> head memory.csv</span></span><br><span class="line">database,type,key,size_in_bytes,encoding,num_elements,len_largest_element</span><br><span class="line">0,string,"orderAt:377671748",96,string,8,8</span><br><span class="line">0,string,"orderAt:413052773",96,string,8,8</span><br><span class="line">0,sortedset,"Artical:Comments:7386",81740,skiplist,479,41</span><br><span class="line">0,sortedset,"pay:id:18029",2443,ziplist,84,16</span><br><span class="line">0,string,"orderAt:452389458",96,string,8,8</span><br></pre></td></tr></table></figure><h4 id="5-导入sqlite3分析内存"><a href="#5-导入sqlite3分析内存" class="headerlink" title="5. 导入sqlite3分析内存"></a>5. 导入sqlite3分析内存</h4><ul><li>csv文件导入到sqlite3</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 memory.db</span><br><span class="line"><span class="meta">sqlite&gt;</span><span class="bash"> create table memory(database int,<span class="built_in">type</span> varchar(128),key varchar(128),size_in_bytes int,encoding varchar(128),num_elements int,len_largest_element varchar(128));</span></span><br><span class="line"><span class="meta">sqlite&gt;</span><span class="bash"> .mode csv memory</span></span><br><span class="line"><span class="meta">sqlite&gt;</span><span class="bash"> .import memory.csv memory</span></span><br></pre></td></tr></table></figure><ul><li>查询key个数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sqlite&gt;</span><span class="bash">select count(*) from memory;</span></span><br></pre></td></tr></table></figure><ul><li>查询总的内存占用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sqlite&gt;</span><span class="bash">select sum(size_in_bytes) from memory;</span></span><br></pre></td></tr></table></figure><ul><li>查询内存占用最高的10个 key</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sqlite&gt;</span><span class="bash">select * from memory order by size_in_bytes desc <span class="built_in">limit</span> 10;</span></span><br></pre></td></tr></table></figure><ul><li>查询成员个数1000个以上的 list</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sqlite&gt;</span><span class="bash">select * from memory <span class="built_in">where</span> <span class="built_in">type</span>=<span class="string">'list'</span> and num_elements &gt; 1000 ;</span></span><br></pre></td></tr></table></figure><ul><li>根据key前缀查询key种类个数，排序后取前十个</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sqlite&gt;</span><span class="bash">select count(*) a, substr(key,0,5) as b from memory group by b order by a desc <span class="built_in">limit</span> 10;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Influxdb 收集 Nginx(Tengine)状态信息并在Grafana上展示（一）Tengine的配置</title>
      <link href="/posts/8214efb11e945d28.html"/>
      <url>/posts/8214efb11e945d28.html</url>
      
        <content type="html"><![CDATA[<h6 id="Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。"><a href="#Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。" class="headerlink" title="Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。"></a><a href="http://tengine.taobao.org/" target="_blank" rel="noopener">Tengine</a>是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</h6><ul><li><h6 id="Tengine的特性"><a href="#Tengine的特性" class="headerlink" title="Tengine的特性"></a>Tengine的特性</h6><ul><li>继承Nginx-1.8.1的所有特性，兼容Nginx的配置；</li><li>动态模块加载（DSO）支持。加入一个模块不再需要重新编译整个Tengine；</li><li>支持HTTP/2协议，HTTP/2模块替代SPDY模块；</li><li>流式上传到HTTP后端服务器或FastCGI服务器，大量减少机器的I/O压力；</li><li>支持异步OpenSSL，可使用硬件如:QAT进行HTTPS的加速与卸载；</li><li>更加强大的负载均衡能力，包括一致性hash模块、会话保持模块，还可以对后端的服务器进行主动健康检查，根据服务器状态自动上线下线，以及动态解析upstream中出现的域名；</li><li>输入过滤器机制支持。通过使用这种机制Web应用防火墙的编写更为方便；</li><li>支持设置proxy、memcached、fastcgi、scgi、uwsgi在后端失败时的重试次数</li><li>动态脚本语言Lua支持。扩展功能非常高效简单；</li><li>支持按指定关键字(域名，url等)收集Tengine运行状态；</li><li>组合多个CSS、JavaScript文件的访问请求变成一个请求；</li><li>自动去除空白字符和注释从而减小页面的体积</li><li>自动根据CPU数目设置进程个数和绑定CPU亲缘性；</li><li>监控系统的负载和资源占用从而对系统进行保护；</li><li>显示对运维人员更友好的出错信息，便于定位出错机器；</li><li>更强大的防攻击（访问速度限制）模块；</li><li>更方便的命令行参数，如列出编译的模块列表、支持的指令等；</li><li>可以根据访问文件类型设置过期时间；</li></ul></li><li><h6 id="更多安装和配置文档请查看-Tengine官方网站"><a href="#更多安装和配置文档请查看-Tengine官方网站" class="headerlink" title="更多安装和配置文档请查看 Tengine官方网站"></a>更多安装和配置文档请查看 <a href="http://tengine.taobao.org/" target="_blank" rel="noopener">Tengine官方网站</a></h6></li></ul><h6 id="监控和收集nginx的相应时间、连接数、http状态码等各项指标可以使用ELK分析日志，也可以用req-status模块在nginx上开放一个api接口供其他程序调用收集。"><a href="#监控和收集nginx的相应时间、连接数、http状态码等各项指标可以使用ELK分析日志，也可以用req-status模块在nginx上开放一个api接口供其他程序调用收集。" class="headerlink" title="监控和收集nginx的相应时间、连接数、http状态码等各项指标可以使用ELK分析日志，也可以用req_status模块在nginx上开放一个api接口供其他程序调用收集。"></a>监控和收集nginx的相应时间、连接数、http状态码等各项指标可以使用ELK分析日志，也可以用req_status模块在nginx上开放一个api接口供其他程序调用收集。</h6><ul><li><h6 id="nginx也是可以做到，需要安装第三方模块ngx-req-status，nginx自带的模块只能显示连接数等等信息，我们并不能知道到底有哪些请求、以及各url域名所消耗的带宽是多少。ngx-req-status提供了这些功能"><a href="#nginx也是可以做到，需要安装第三方模块ngx-req-status，nginx自带的模块只能显示连接数等等信息，我们并不能知道到底有哪些请求、以及各url域名所消耗的带宽是多少。ngx-req-status提供了这些功能" class="headerlink" title="nginx也是可以做到，需要安装第三方模块ngx_req_status，nginx自带的模块只能显示连接数等等信息，我们并不能知道到底有哪些请求、以及各url域名所消耗的带宽是多少。ngx_req_status提供了这些功能."></a>nginx也是可以做到，需要安装第三方模块<a href="https://github.com/zls0424/ngx_req_status/archive/master.zip" target="_blank" rel="noopener">ngx_req_status</a>，nginx自带的模块只能显示连接数等等信息，我们并不能知道到底有哪些请求、以及各url域名所消耗的带宽是多少。ngx_req_status提供了这些功能.</h6></li><li>功能特性<ul><li>按域名、uri、ip等统计信息</li><li>统计http状态码</li><li>统计当前带宽、峰值带宽</li><li>统计总请求量</li><li>可定制获取一部分或所有监控结果</li><li>回收过期的监控数据。</li><li>设置输出格式</li><li>跟踪请求，不受内部跳转的影响</li></ul></li><li><h6 id="tengine在编译安装时默认会编译ngx-http-reqstat-module模块，除非通过–without-http-reqstat-module指明不编译此模块，或通过–with-http-reqstat-module-shared编译为so模块。使用so模块加载的话，请确保其顺序在”ngx-http-lua-module”之后。可以借助”nginx-m”来确认。"><a href="#tengine在编译安装时默认会编译ngx-http-reqstat-module模块，除非通过–without-http-reqstat-module指明不编译此模块，或通过–with-http-reqstat-module-shared编译为so模块。使用so模块加载的话，请确保其顺序在”ngx-http-lua-module”之后。可以借助”nginx-m”来确认。" class="headerlink" title="tengine在编译安装时默认会编译ngx_http_reqstat_module模块，除非通过–without-http_reqstat_module指明不编译此模块，或通过–with-http_reqstat_module=shared编译为so模块。使用so模块加载的话，请确保其顺序在”ngx_http_lua_module”之后。可以借助”nginx -m”来确认。"></a>tengine在编译安装时默认会编译ngx_http_reqstat_module模块，除非通过–without-http_reqstat_module指明不编译此模块，或通过–with-http_reqstat_module=shared编译为so模块。使用so模块加载的话，请确保其顺序在”ngx_http_lua_module”之后。可以借助”nginx -m”来确认。</h6></li><li><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">  req_status_zone server "$host,$uri" 20M;</span><br><span class="line">  req_status_zone_add_indicator server $limit;</span><br><span class="line"></span><br><span class="line">  server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.madblog.cn</span><br><span class="line">    access_log   /var/log/nginx/status.access.log logstash_json buffer=33k flush=5s;</span><br><span class="line">    error_log  /var/log/nginx/status.error.log;</span><br><span class="line"></span><br><span class="line">    set $limit 0;</span><br><span class="line">    if ($arg_limit = '1') &#123; set $limit 1; &#125;</span><br><span class="line"></span><br><span class="line">    location /request_stats &#123;</span><br><span class="line">      req_status_show;</span><br><span class="line">      req_status_show_field conn_total req_total rt ups_rt ups_req http_2xx http_3xx http_4xx http_5xx http_other_status $limit;</span><br><span class="line">    &#125;</span><br><span class="line">    req_status server;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>req_status_zone</strong><ul><li>语法：req_status_zone [name] [string] [size]</li><li>位置：http</li><li>创建统计使用的共享内存。zone_name是共享内存的名称，value用于定义key，支持变量。size是共享内存的大小。</li></ul></li><li><em>req_status_zone_add_indicator**</em><ul><li>语法：req_status_zone_add_indicator zone_name $var1 [$var2 […]]_</li><li>通过变量增加自定义字段，新增加的字段目前会展现在每行的末尾。</li></ul></li><li><strong>req_status</strong><ul><li>语法：req_status [zone1] [zone2]</li><li>位置：http、server、location</li><li>在该位置启用请求状态。你可以按需求指定多个请求状态区域。</li></ul></li><li><strong>req_status_show</strong><ul><li>语法：req_status_show on</li><li>位置：location</li><li>在当前位置启用请求状态处理程序。</li></ul></li><li><strong>req_status_zone_key_length</strong><ul><li>语法：req_status_zone_key_length zone_name length</li><li>位置：location</li><li>定义某个共享内存块中key的最大长度，默认值104。key中超出的部分会被截断。</li></ul></li><li><p><strong>req_status_zone_recycle</strong></p><ul><li>语法：req_status_zone_recycle zone_name times seconds</li><li>位置：定义某个共享内存块过期数据的回收。回收在共享内存耗尽时自动开启。只会回收访问频率低于设置值的监控数据。频率定义为 times / seconds，默认值为10r/min。即：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req_status_zone_recycle demo_zone 10 60;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>每行默认格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kv,bytes_in,bytes_out,conn_total,req_total,http_2xx,http_3xx,http_4xx,http_5xx,http_other_status,rt,ups_req,ups_rt,ups_tries,http_200,http_206,http_302,http_304,http_403,http_404,http_416,http_499,http_500,http_502,http_503,http_504,http_508,http_other_detail_status,http_ups_4xx,http_ups_5xx</span><br></pre></td></tr></table></figure></li><li><p><strong>各字段解释</strong></p><ul><li>kv 计算得到的req_status_zone指令定义变量的值，最大长度可配置，默认104B，超长的部分截断</li><li>bytes_in 从客户端接收流量总和</li><li>bytes_out 发送到客户端流量总和</li><li>conn_total 处理过的连接总数</li><li>req_total 处理过的总请求数</li><li>http_2xx 2xx请求的总数</li><li>http_3xx 3xx请求的总数</li><li>http_4xx 4xx请求的总数</li><li>http_5xx 5xx请求的总数</li><li>http_other_status 其他请求的总数</li><li>rt rt的总数</li><li>ups_req 需要访问upstream的请求总数</li><li>ups_rt 访问upstream的总rt</li><li>ups_tries upstram总访问次数</li><li>http_200 200请求的总数</li><li>http_206 206请求的总数</li><li>http_302 302请求的总数</li><li>http_304 304请求的总数</li><li>http_403 403请求的总数</li><li>http_404 404请求的总数</li><li>http_416 416请求的总数</li><li>http_499 499请求的总数</li><li>http_500 500请求的总数</li><li>http_502 502请求的总数</li><li>http_503 503请求的总数</li><li>http_504 504请求的总数</li><li>http_508 508请求的总数</li><li>http_other_detail_status 非以上13种status code的请求总数</li><li>http_ups_4xx upstream返回4xx响应的请求总数</li><li>http_ups_5xx upstream返回5xx响应的请求总数</li><li>可以用”req_status_show_field”指令定义输出格式。左侧栏是字段的名字。</li></ul></li><li><p><strong>测试请求指令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v 127.0.0.1/request_stats</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tengine </tag>
            
            <tag> Nginx </tag>
            
            <tag> Influxdb </tag>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zaibbix Preprocessing 预处理json</title>
      <link href="/posts/447db89dfafcd0d8.html"/>
      <url>/posts/447db89dfafcd0d8.html</url>
      
        <content type="html"><![CDATA[<h6 id="Zabbix-3-4版本更新了许多新功能，其中一个监控项功能Preprocessing，根据官方说明文档，在监控项收集的数据存储到数据库前，预先对数据进行处理。"><a href="#Zabbix-3-4版本更新了许多新功能，其中一个监控项功能Preprocessing，根据官方说明文档，在监控项收集的数据存储到数据库前，预先对数据进行处理。" class="headerlink" title="Zabbix 3.4版本更新了许多新功能，其中一个监控项功能Preprocessing，根据官方说明文档，在监控项收集的数据存储到数据库前，预先对数据进行处理。"></a>Zabbix 3.4版本更新了许多新功能，其中一个监控项功能Preprocessing，根据官方说明文档，在监控项收集的数据存储到数据库前，预先对数据进行处理。</h6><h6 id="例如我想监控tengine或者hadoop集群的状态，调用接口可以返回json。传统做法是一个监控项item取一个监控key的值，那我有二三十个集群状态项需要监控，每个监控项调用一次返回相同的json，就凭白耗费了很多性能。而自动发现也同样不试用于这类监控的处理，自动发现多用于配置一套规则，自动发现成多组相似类型监控，也不好处理嵌套的json，非json类型的字符串就更不能处理了。Preprocessing功能就很好的解决了这方面的问题。"><a href="#例如我想监控tengine或者hadoop集群的状态，调用接口可以返回json。传统做法是一个监控项item取一个监控key的值，那我有二三十个集群状态项需要监控，每个监控项调用一次返回相同的json，就凭白耗费了很多性能。而自动发现也同样不试用于这类监控的处理，自动发现多用于配置一套规则，自动发现成多组相似类型监控，也不好处理嵌套的json，非json类型的字符串就更不能处理了。Preprocessing功能就很好的解决了这方面的问题。" class="headerlink" title="例如我想监控tengine或者hadoop集群的状态，调用接口可以返回json。传统做法是一个监控项item取一个监控key的值，那我有二三十个集群状态项需要监控，每个监控项调用一次返回相同的json，就凭白耗费了很多性能。而自动发现也同样不试用于这类监控的处理，自动发现多用于配置一套规则，自动发现成多组相似类型监控，也不好处理嵌套的json，非json类型的字符串就更不能处理了。Preprocessing功能就很好的解决了这方面的问题。"></a>例如我想监控tengine或者hadoop集群的状态，调用接口可以返回json。传统做法是一个监控项item取一个监控key的值，那我有二三十个集群状态项需要监控，每个监控项调用一次返回相同的json，就凭白耗费了很多性能。而自动发现也同样不试用于这类监控的处理，自动发现多用于配置一套规则，自动发现成多组相似类型监控，也不好处理嵌套的json，非json类型的字符串就更不能处理了。Preprocessing功能就很好的解决了这方面的问题。</h6><h5 id="Preprocessing功能列表"><a href="#Preprocessing功能列表" class="headerlink" title="Preprocessing功能列表"></a>Preprocessing功能列表</h5><table><thead><tr><th>转换</th><th>描述</th></tr></thead><tbody><tr><td>Custom multiplier</td><td>将值乘以指定的整数或浮点值。使用此选项将以KB，MBps等接收的值转换为B，Bps，否则Zabbix无法正确设置前缀（K，M，G等）。从Zabbix 2.2开始，也支持使用科学符号。 例如。 1e + 70。</td></tr><tr><td>Right trim</td><td>从值的末尾删除指定的字符。</td></tr><tr><td>Left trim</td><td>从值的起始处删除指定的字符。</td></tr><tr><td>Trim</td><td>从值的起始和结尾删除指定的字符。</td></tr><tr><td>Regular expression</td><td>将值与<pattern>正则表达式匹配，并用&lt;output>替换值。 正则表达式支持用\N序列提取最多10个捕获的组。\ 参数: <p>pattern - 正则表达式 </p><p>output - 输出格式化模板。一个\N（其中N = 1 … 9）转义序列被替换为第N个匹配组。</p></pattern></td></tr><tr><td>Boolean to decimal</td><td>将值从布尔格式转换为十进制。文本表示被转换为0或1.因此，“TRUE”存储为1，“FALSE”存储为0.所有值都以不区分大小写的方式进行匹配。当前被认为的布尔值值如下：<p>TRUE - true, t, yes, y, on, up, running, enabled, available </p><p>FALSE - false, f, no, n, off, down, unused, disabled, unavailable </p><p>此外，任何非零数值都被认为是TRUE，0被认为是FALSE。</p></td></tr><tr><td>Octal to decimal</td><td>将八进制格式的值转换为十进制。</td></tr><tr><td>Hexadecimal to decimal</td><td>将值从十六进制格式转换为十进制。</td></tr><tr><td>Delta</td><td>计算当前值和上一个值之间的差值。评估为value-prev_value，其中 value - current value; prev_value - 以前收到的值每个项目只允许一个delta操作。</td></tr><tr><td>Delta per second</td><td>计算每秒速度的值变化（当前值和上一个值的差值）。<p>计算为（value-prev_value）/（time-prev_time），其中 value - 当前值; prev_value - 当前收到的值; time - 当前时间戳，prev_time - 以前值的时间戳。</p><p>这个设置是非常有用的，以获得每秒不断增长的速度值。 如果当前值小于上一个值，Zabbix将丢弃该差异（不存储）并等待另一个值。这有助于正常工作，例如，32位SNMP计数器的包装（溢出）。</p><p>注意: 由于此计算可能产生浮点数，建议将‘Type  of information‘ 设置为 Numeric (float)，即使传入的原始值是整数。  这对于小数部分尤其重要。 如果浮点值很大并且可能超过‘float‘字段长度，在这种情况下，整个值可能会丢失，实际上建议使用Numeric（无符号），因此只会修剪小数部分。</p><p>每个监控项只允许一个delta操作。</p></td></tr></tbody></table><h4 id="以json类型处理为例"><a href="#以json类型处理为例" class="headerlink" title="以json类型处理为例"></a>以json类型处理为例</h4><ul><li>主监控项通过配置如下，通过监控项调用脚本，得到json。<br><a href="https://imgchr.com/i/kXTMsf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/05/kXTMsf.md.jpg" alt="kXTMsf.md.jpg"></a></li><li>监控项调用的脚本返回的json如下<br><img src="https://s2.ax1x.com/2019/03/05/kXTtWn.jpg" alt="kXTtWn.jpg"></li><li>配置子监控项如下，主要是类型选择「相关项目」，英文版为「Dependent item」。「主要项/Master item」选择配置好的主监控项。<br><a href="https://imgchr.com/i/kXT4eO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/05/kXT4eO.md.jpg" alt="kXT4eO.md.jpg"></a></li><li><p>在「进程/Preprocessing」中选择：</p><ul><li>Name: JSON Path</li><li>Parameters: $.yourkey</li><li>yourkey是指主监控项获得的json中对应的key。<br><a href="https://imgchr.com/i/kXTXOf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/05/kXTXOf.md.jpg" alt="kXTXOf.md.jpg"></a></li></ul></li><li><p>如此，就可以运行一次脚本，获取一次json，每个key生成对应的监控项了。对应非json类型的字符串，可以配置正则来获取需要的字符串。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
            <tag> Preprocessing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本与编程笔记</title>
      <link href="/posts/63396f8432c139a8.html"/>
      <url>/posts/63396f8432c139a8.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-expr-命令"><a href="#1-expr-命令" class="headerlink" title="1. expr 命令"></a>1. expr 命令</h3><ul><li><p>expr命令允许在命令行上处理数学表达式</p><ul><li>例如</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@madking:😂 ~ # expr 1 \| 2</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>expr 命令操作符记录</p></li></ul><h3 id="2、if-需要注意的"><a href="#2、if-需要注意的" class="headerlink" title="2、if 需要注意的"></a>2、if 需要注意的</h3><ul><li>if [ -n “$var1” ];then<ul><li>判断var1变量的长度是否为非零，为非零则返回true，为零则返回false</li><li>-n 判断变量是否为空时，变量必须加引号，否则 if就会认为 [ -n ] 是一个字符串，这样 if [ -n ],总会进入判断。、</li></ul></li><li><p>if [ -z “$var1” ];then</p><ul><li>判断var1变量的长度是否为零，为零则返回true，为非零则返回flase</li></ul></li><li><p>if [ ‘aaa’ &gt; ‘bbb’ ];then</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@madking:😂 ~ # if [ 'aaa' &gt; 'bbb' ];then</span><br><span class="line"><span class="meta">then&gt;</span><span class="bash"> <span class="built_in">echo</span> yes</span></span><br><span class="line"><span class="meta">then&gt;</span><span class="bash"> <span class="keyword">fi</span></span></span><br><span class="line">yes</span><br><span class="line">root@madking:😂 ~ # ls bbb</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure><ul><li><p>单中括号里的大于小于号，需要进行转义，否则就会当成重定向，if的判断里’aaa’本来比’bbb’小，不会输出yes。但是因为实际是执行了重定向，新生成了bbb文件，执行是成功的，$?=0，所以实际是输出了yes，并且在当前目录生称了bbb文件。</p></li><li><p>双括号 (( ))</p><ul><li>双括号允许在比较过程中使用高级的数学表达式</li><li>var++ val– ++val –val ! ~ ** &lt;&lt; &gt;&gt; &amp; | &amp;&amp; || 等</li></ul></li><li><p>双方括号命令提供了针对字符串比较的高级特性，除了标准字符串比较，还提供了模式匹配。</p></li></ul></li></ul><h3 id="3、脚本变量"><a href="#3、脚本变量" class="headerlink" title="3、脚本变量"></a>3、脚本变量</h3><ul><li>脚本获取参数 $1-$9,${10},${11},大于9用大括号</li><li>$0参数获取shell在命令行启动的脚本名</li><li>./test.sh 执行则$0为 ./test.sh</li><li>获取文件名称使用 basename $0</li><li>$# 参数总个数</li><li>获取最后一个参数不能用</li><li>$* 和 $@ 都表示所有命令行参数，但是$* 会将所有参数当成一个单词，而$@会将每个参数当做一个单词，具体表现在for循环时，$*会输出一行整体参数，$@会每行输出一个参数。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat test12.sh </span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> testing $* and <span class="variable">$@</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">echoM</span><br><span class="line">count=1</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">for param in "$*"</span><br><span class="line">do</span><br><span class="line">   echo "\$* Parameter #$count = $param"</span><br><span class="line">   count=$[ $count + 1 ]</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">echo</span><br><span class="line">count=1</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">for param in "$@"</span><br><span class="line">do</span><br><span class="line">   echo "\$@ Parameter #$count = $param"</span><br><span class="line">   count=$[ $count + 1 ]</span><br><span class="line">done</span><br><span class="line"><span class="meta">$</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./test12.sh rich barbara katie jessica</span></span><br><span class="line"><span class="meta">$</span><span class="bash">* Parameter <span class="comment">#1 = rich barbara katie jessica</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">@ Parameter <span class="comment">#1 = rich</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">@ Parameter <span class="comment">#2 = barbara</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">@ Parameter <span class="comment">#3 = katie</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">@ Parameter <span class="comment">#4 = jessica</span></span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>重定向</p><ul><li>临时重定向，echo ‘this is an error’ &gt;&amp;2</li><li><p>永久重定向，exec 2&gt;testerror</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat test10</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redirecting all output to a file</span></span><br><span class="line">exec 1&gt;testout</span><br><span class="line">echo "This is a test of redirecting all output"</span><br><span class="line">echo "from a script to another file."</span><br><span class="line">echo "without having to redirect every individual line"</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./test10</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat testout</span></span><br><span class="line">This is a test of redirecting all output</span><br><span class="line">from a script to another file.</span><br><span class="line">without having to redirect every individual line</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure></li><li><p>read 读取重定向后的输入，将文件重定向到输入中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat test12</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redirecting file input</span></span><br><span class="line">exec 0&lt; testfile</span><br><span class="line">count=1</span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">   echo "Line #$count: $line"</span><br><span class="line">   count=$[ $count + 1 ]</span><br><span class="line">done</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./test12</span></span><br><span class="line">Line #1: This is the first line.</span><br><span class="line">Line #2: This is the second line.</span><br><span class="line">Line #3: This is the third line.</span><br></pre></td></tr></table></figure></li><li><p>文件描述符的试用实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat test15 9 <span class="comment">#!/bin/bash</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redirecting input file descriptors</span></span><br><span class="line">exec 6&lt;&amp;0 10 exec 0&lt; testfile</span><br><span class="line">count=1 11 while read line;do</span><br><span class="line">  echo "Line #$count: $line"  </span><br><span class="line">  count=$[ $count + 1 ] 12</span><br><span class="line">done</span><br><span class="line">exec 0&lt;&amp;6</span><br><span class="line">read -p "Are you done now? " answer</span><br><span class="line">case $answer in </span><br><span class="line">  Y|y) echo "Goodbye";;</span><br><span class="line">  N|n) echo "Sorry, this is the end.";;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><ul><li>该脚本展示了shell的描述符的重定向用例，在将0从屏幕的读取重定向到从文件中读取，读取完成后下文中如果需要再次试用0描述符从屏幕中读取则需要再次重定向回屏幕。脚本中试用了自定义的6描述符来存储0描述符修改前的状态。</li></ul></li><li><p>关闭文件描述符</p><ul><li>exec 3&gt;&amp;-</li><li>要关闭文件描述符，将它重定向到特殊符号&amp;-。</li></ul></li><li><p>列出打开的文件描述符</p><ul><li>lsof命令会列出整个Linux系统打开的所有文件描述符。</li></ul></li></ul></li><li><p>tee命令相当于管道的一个T型接头。它将从STDIN过来的数据同时发往两处。一处是 STDOUT，另一处是tee命令行所指定的文件名。tee默认使用覆盖模式，如果想追加则需要添加参数-a。</p></li></ul><h3 id="4、后台模式运行脚本"><a href="#4、后台模式运行脚本" class="headerlink" title="4、后台模式运行脚本"></a>4、后台模式运行脚本</h3><ul><li>jobs查看分配给shell的作业<ul><li>jobs命令可以查看分配给shell的作业。jobs命令会显示这两个已停止/运行中的作业，以及 它们的作业号和作业中使用的命令。</li><li>要想查看作业的PID，可以在jobs命令中加入-l选项 jobs -l。</li><li>jobs输出中带加号的是默认作业，带减号的会在当前默认作业即带加号的作业完成后成为默认作业。</li></ul></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-l</td><td>列出进程的PID以及作业号</td></tr><tr><td>-n</td><td>只列出上次shell发出的通知后改变了状态的作业</td></tr><tr><td>-p</td><td>只列出作业的PID</td></tr><tr><td>-r</td><td>只列出运行中的作业</td></tr><tr><td>-s</td><td>只列出已停止的作业</td></tr></tbody></table><ul><li>后台符&amp;运行的脚本会挂在当前的终端会话(类似pts/0)终端联系在一起。如果终端会话退出，那么后台进程也会随之退出。</li><li><p>nohup命令运行了一个命令来阻断所有发给该进程的SIGHUP信号。这会在退出终端会话时阻止进程退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./test1.sh &amp;</span></span><br><span class="line">[1] 3856</span><br><span class="line"><span class="meta">$</span><span class="bash"> nohup: ignoring input and appending output to <span class="string">'nohup.out'</span></span></span><br></pre></td></tr></table></figure></li><li><p>nohup 默认会将该进程的STDOUT和STDERR的消息重定向到一个当前目录的nohup.out的文件中。</p></li><li>nohup 不加后台符&amp;程序并不会挂到后台，而且会阻塞当前会话。</li><li>每个nohup xxxx  &amp; 都是一个后台运行的job，可以用jobs查看，当然也可以用fg + jobid 调到前台。</li><li>将正在运行的进程停止、后台运行、前台运行<ul><li>例如vim a.txt</li><li>ctl + z 将vim停止运行，终端会跳出vim，展示当前会话shell</li><li>bg 会将当前默认任务（job查看带+号的）放到后台运行</li><li>fg 会将当前默认任务放到前台运行</li><li>bg + jobid 将某一个任务放到后台运行</li><li>fg + jobid 将某一个任务放到前台运行</li></ul></li></ul><h3 id="shell-高级编程"><a href="#shell-高级编程" class="headerlink" title="shell 高级编程"></a>shell 高级编程</h3><h3 id="shell脚本风格指南"><a href="#shell脚本风格指南" class="headerlink" title="shell脚本风格指南"></a>shell脚本风格指南</h3><ul><li><p>所有的错误信息都应该被导向STDERR。</p><ul><li>这使得从实际问题中分离出正常状态变得更容易。推荐使用类似如下函数，将错误信息和其他状态信息一起打印出来。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">err() &#123;</span><br><span class="line">  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" &gt;&amp;2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ! do_something; then</span><br><span class="line">  err "Unable to do_something"</span><br><span class="line">  exit "$&#123;E_DID_NOTHING&#125;"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h3 id="工作中遇到的"><a href="#工作中遇到的" class="headerlink" title="工作中遇到的"></a>工作中遇到的</h3><ul><li>主机名不能用下划线 </li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 修改副本集名称</title>
      <link href="/posts/d5cc6ffb1555a830.html"/>
      <url>/posts/d5cc6ffb1555a830.html</url>
      
        <content type="html"><![CDATA[<h5 id="生产环境中偶尔会有修改现有副本集名称，或初始化副本集时名称写错需要修改为正确的副本集名称。副本集的信息是写在local数据库的system-replset中的，需要将MongoDB以单节点启动并修改local数据库中的副本集相关信息，然后重新启动并reconfig副本集。"><a href="#生产环境中偶尔会有修改现有副本集名称，或初始化副本集时名称写错需要修改为正确的副本集名称。副本集的信息是写在local数据库的system-replset中的，需要将MongoDB以单节点启动并修改local数据库中的副本集相关信息，然后重新启动并reconfig副本集。" class="headerlink" title="生产环境中偶尔会有修改现有副本集名称，或初始化副本集时名称写错需要修改为正确的副本集名称。副本集的信息是写在local数据库的system.replset中的，需要将MongoDB以单节点启动并修改local数据库中的副本集相关信息，然后重新启动并reconfig副本集。"></a>生产环境中偶尔会有修改现有副本集名称，或初始化副本集时名称写错需要修改为正确的副本集名称。副本集的信息是写在local数据库的system.replset中的，需要将MongoDB以单节点启动并修改local数据库中的副本集相关信息，然后重新启动并reconfig副本集。</h5><h5 id="具体步骤如下"><a href="#具体步骤如下" class="headerlink" title="具体步骤如下"></a>具体步骤如下</h5><ol><li><p>停掉当前副本集所有节点</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; supervisorctl</span><br><span class="line">supervisor&gt; stop mongod_27077</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者 </span></span><br><span class="line">&gt; <span class="built_in">kill</span> -15 xxxx (mongodb的pid)</span><br></pre></td></tr></table></figure></li><li><p>以单节点启动当前副本集所有节点</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; /opt/mongodb/bin/mongod --wiredTigerDirectoryForIndexes --dbpath /data/mongodb/ --port 27077 --maxConns 1000  --quiet --logappend --logpath /data/server/logs_tmp/logs/mongo_27077.log --directoryperdb --nojournal --oplogSize 1000</span><br></pre></td></tr></table></figure></li><li><p>在local库中删除副本集相关信息</p><ul><li><p>例如错把集合名称db_test写成db_text</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; use <span class="built_in">local</span></span><br><span class="line">&gt; var doc = db.system.replset.findOne()</span><br><span class="line">&gt; doc._id = <span class="string">"db_test"</span></span><br><span class="line">&gt; db.system.replset.save(doc)</span><br><span class="line">&gt; db.system.replset.remove(&#123;_id:<span class="string">'db_text'</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重启副本集所有节点，在启动配置中将副本集名称修改为新的副本集名称</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -15 xxxx (MongoDB的pid)</span><br><span class="line"><span class="comment">#如果是supervisor方式启动，需要修改对应的配置文件中的副本集名称</span></span><br><span class="line">&gt; supervisorctl</span><br><span class="line">supervisor&gt; start mongod_27077</span><br></pre></td></tr></table></figure></li><li><p>重新reconfig为新的副本集</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    &gt; mongo --port 27077</span><br><span class="line">    test01:PRIMARY&gt; conf= &#123; </span><br><span class="line">    <span class="string">"_id"</span>: <span class="string">"test01"</span>, <span class="string">"members"</span>:[         </span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="string">"_id"</span> : 1,</span><br><span class="line">        <span class="string">"host"</span> : <span class="string">"test01:27077"</span>,</span><br><span class="line">        <span class="string">"priority"</span> : 20</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;             </span><br><span class="line">        <span class="string">"_id"</span> : 2,</span><br><span class="line">        <span class="string">"host"</span> : <span class="string">"test02:27078"</span>,</span><br><span class="line">        <span class="string">"arbiterOnly"</span> : <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="string">"_id"</span> : 3,</span><br><span class="line">       <span class="string">"host"</span> : <span class="string">"test03:27079"</span>,</span><br><span class="line">       <span class="string">"arbiterOnly"</span> : <span class="literal">true</span></span><br><span class="line">    &#125;]  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test01:PRIMARY&gt;  rs.reconfig(conf)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> replicate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB从2.xx.xx升级到3.xx.xx版本</title>
      <link href="/posts/2a3a458f30e97485.html"/>
      <url>/posts/2a3a458f30e97485.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、为什么要升级到3-X"><a href="#一、为什么要升级到3-X" class="headerlink" title="一、为什么要升级到3.X"></a>一、为什么要升级到3.X</h3><ul><li><p>MongoDB 2.6只支持一种给予内存映射技术的存于引擎即MMAP，MongoDB 3.0增加了支持压缩和文档级锁的存储引擎WiredTiger</p></li><li><p>WiredTiger存储引擎的优点如下：</p><ol><li><p>支持文档级别并发控制，也就是文档级别锁。提升读写性能，并大大提高并发处理能力。</p></li><li><p>磁盘数据压缩，WiredTiger支持对数据文件进行压缩，压缩选项有：不压缩、Snappy压缩和Zlib压缩，默认使用Snappy压缩选项。从实验结果来看，使用默认的Snappy压缩选项，库文件从35G降到了2.4G，数据文件压缩10倍以上。</p></li><li><p>磁盘文件快速回收：旧版本Mongo在数据库级别分配文件，数据库中的所有集合和索引都混合存储在数据库文件中，所以即 使删掉了某个集合或者索引，占用的磁盘空间也很难及时自动回收。WiredTiger在集合和索引级别分配文件，数据库中的所有集合和索引均存储在单独的 文件中，集合或者索引删除后，对应的存储文件随即删除。</p></li></ol></li><li><p>因为存储方式不同，低版本的数据库无法直接升级到WiredTiger存储引擎，只能通过导 出导入数据的方式来实现。</p></li></ul><h3 id="二、升级步骤"><a href="#二、升级步骤" class="headerlink" title="二、升级步骤"></a>二、升级步骤</h3><ol><li><p>下载<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">MongoDB 3.2.11版本</a>免安装文件。</p><ul><li>如下图中，选择社区版，选择对应的系统版本，然后点击「All Version Binaries」，选择3.2.11版本MongoDB。当然，如果想安装更高的MongoDB版本，理论上此方法也是可行的，只是我升级到的是3.2.11版本。以下以3.2.11版本来讲。<br><img src="https://s1.ax1x.com/2018/09/17/iZQdnH.jpg" alt="下载MongoDB 3.2.11版本"></li></ul></li><li><p>将下载下来的软件包解压，然后拷贝到/opt目录下</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; tar xvzf mongodb-linux-x86_64-ubuntu1404-3.2.11.tgz</span><br><span class="line">&gt; cp mongodb-linux-x86_64-ubuntu1404-3.2.11 /opt/mongodb-3.2.11</span><br></pre></td></tr></table></figure></li><li><p>mongodump 导出旧版MongoDB中数据</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; nohup mongodump -h 127.0.0.1 --port 27077   --oplog -o  /mnt/datatmp/dbbak/  2&gt;&amp;1 &gt; /tmp/dump.log &amp;</span><br></pre></td></tr></table></figure><ul><li>如果是停库导出数据，可以不加–oplog，如果是在下导出的，需要添加–oplog，在导入时指令restore需要加–oplogReplay参数，以保证数据的一致性。</li></ul></li><li><p>停掉旧版MongoDB，以单节点启动新版MongoDB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">kill</span> -15 9224 <span class="comment">#9224 为MongoDB的pid，当然如果用了supervisor的话，可以用其他方式来停止。</span></span><br><span class="line">&gt; /opt/mongodb/bin/mongod --wiredTigerDirectoryForIndexes --dbpath /mnt/datatmp/mongodb --port 27001 --maxConns 3000 --quiet  --logpath /mnt/datatmp/newdb.log --directoryperdb --oplogSize 1000 --fork</span><br></pre></td></tr></table></figure></li><li><p>导入数据    到新版MongoDB</p><ul><li><p>进入导出的数据文件中，删除admin库文件，因为3.x之后的MongoDB默认没有admin库，不删除会导致导入时报错。</p></li><li><p>如果库文件过多，例如测试环境一个实例跑了二三百个DB，可能在导入时报打开文件数过多的错误，解决方法：一种是将导出文件平均分成n个部分，分布导入，oplog在最后一组中。另一种方法是设置ulimit -n 655350,极度的增大当前用户可打开的文件个数。</p></li><li><p>为了防止失败后需要删除数据重新导入，可以将导出数据分组然后加入参数”–drop”，在导入当前库时如果已存在当前库则删除该库后再导入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; nohup /opt/mongodb/bin/mongorestore --host 127.0.0.1 --port  27001 --oplogReplay /mnt/datatmp/newdbbak --drop 2&gt;&amp;1 &gt;/tmp/restore.log &amp;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将新版MongoDB初始化为副本集</p><ul><li><p>以副本集方式启动新版MongoDB</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/mongodb/bin/mongod --wiredTigerDirectoryForIndexes --dbpath /data/mongodb/ --port 28077 --maxConns 1000  --quiet --logappend --logpath /data/server/logs_tmp/logs/mongodb_27077.log --directoryperdb --nojournal --oplogSize 1000 --replSet test01</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>以同样方式启动其他节点，可使用物理拷贝主节点文件或初始化集群后MongoDB自动同步数据的方法初始化从节点。</p></li><li><p>初始化副本集</p><pre><code>```bashtest01:PRIMARY&gt; conf= {     &quot;_id&quot;: &quot;test01&quot;, &quot;members&quot;:[             {           &quot;_id&quot; : 1,        &quot;host&quot; : &quot;test01:27077&quot;,        &quot;priority&quot; : 20    },    {                     &quot;_id&quot; : 2,        &quot;host&quot; : &quot;test02:27078&quot;,        &quot;arbiterOnly&quot; : true    },    {       &quot;_id&quot; : 3,       &quot;host&quot; : &quot;test03:27079&quot;,       &quot;arbiterOnly&quot; : true    }]  }test01:PRIMARY&gt;  rs.initiate(conf)``` </code></pre></li></ul></li></ol><ul><li>mongodb在2.6版本之后不允许索引大于1M，否则会报错，如果在导入时因索引报错中断导入，</li><li><code>-</code> 有如下两种方法：<ul><li>一是在 mongorestore 中加上 noIndexRestore 不恢复索引，注意此时意味着恢复完成后要手动对每一个数据库的每一个文档重建索引</li><li>一是在 编辑 collection.metadata.json 文件，把与那个索引有关的语句删除掉</li></ul></li><li>在实际操作中并没有遇到上述中断的情况，只是在完成之后登陆MongoDB终端时有警告：</li></ul><pre><code>&gt; WARNING: the collection &apos;testdb.testtb&apos; lacks a unique index on _id. This index is needed for replication to function properly我执行了一次重启警告就消失了，具体原因还需查找文档。</code></pre><h4 id="如此MongoDB·便升级完了，升级之后会发现新版DB数据文件会小了很多很多，原因是-WiredTiger默认使用过了Snappy级别压缩。具体压缩级别可按实际cpu的使用率选择，一般MongoDB对cpu的使用并不是很高，使用Snappy或Zlib压缩，一方面节约了磁盘，另一方面也合理使用了cpu资源。当然导入数据之后检查库文件和表数据也是必须的。"><a href="#如此MongoDB·便升级完了，升级之后会发现新版DB数据文件会小了很多很多，原因是-WiredTiger默认使用过了Snappy级别压缩。具体压缩级别可按实际cpu的使用率选择，一般MongoDB对cpu的使用并不是很高，使用Snappy或Zlib压缩，一方面节约了磁盘，另一方面也合理使用了cpu资源。当然导入数据之后检查库文件和表数据也是必须的。" class="headerlink" title="如此MongoDB·便升级完了，升级之后会发现新版DB数据文件会小了很多很多，原因是 WiredTiger默认使用过了Snappy级别压缩。具体压缩级别可按实际cpu的使用率选择，一般MongoDB对cpu的使用并不是很高，使用Snappy或Zlib压缩，一方面节约了磁盘，另一方面也合理使用了cpu资源。当然导入数据之后检查库文件和表数据也是必须的。"></a>如此MongoDB·便升级完了，升级之后会发现新版DB数据文件会小了很多很多，原因是 WiredTiger默认使用过了Snappy级别压缩。具体压缩级别可按实际cpu的使用率选择，一般MongoDB对cpu的使用并不是很高，使用Snappy或Zlib压缩，一方面节约了磁盘，另一方面也合理使用了cpu资源。当然导入数据之后检查库文件和表数据也是必须的。</h4>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sed常用用法总结</title>
      <link href="/posts/ae371d4e5e4ba81c.html"/>
      <url>/posts/ae371d4e5e4ba81c.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>a\  在指定行下面插入文本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'2a\这是追加的内容'</span> a.txt</span><br></pre></td></tr></table></figure></li><li><p>i\ 在当前行前面插入文本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'2i\这是追加的内容'</span> a.txt</span><br></pre></td></tr></table></figure></li><li><p>c\ 把选定的行改为新的文本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰： sed <span class="string">'2c\这是追加的内容'</span> a.txt</span><br></pre></td></tr></table></figure></li><li><p>d 删除选择的行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰： sed <span class="string">'2d'</span> a.txt</span><br></pre></td></tr></table></figure></li><li><p>D 删除莫板块的第一行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'2D'</span> a.txt</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>替换指定字符</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰： sed <span class="string">'s/aa/b/g'</span> a.txt</span><br></pre></td></tr></table></figure></li><li><p>hold space 与 pattern space</p><ul><li>g: 将hold space中的内容拷贝到pattern space中，原来pattern space里的内容被覆盖</li><li>G：将hold space中的内容append到pattern space\n后</li><li>h: 将pattern space中的内容拷贝到hold space中，原来hold space里的内容被覆盖</li><li>H: 将pattern space中的内容append到hold space\n后</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'1!G;h;$!d'</span> file</span><br></pre></td></tr></table></figure><p> <img src="https://s1.ax1x.com/2018/09/10/iiTq9x.png" alt="avatar"></p></li><li><p>删除空白行：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'/^$/d'</span> file</span><br></pre></td></tr></table></figure></li><li><p>任意定界符</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'s:test:TEXT:g'</span></span><br><span class="line">    sed <span class="string">'s|test|TEXT|g'</span></span><br><span class="line">    sed <span class="string">'sa\aa'</span><span class="variable">$a</span><span class="string">'ag'</span> a.txt</span><br></pre></td></tr></table></figure></li><li><p>删除文件的第2行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'2d'</span> file</span><br></pre></td></tr></table></figure></li><li><p>删除文件的第2行到末尾所有行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'2,$d'</span> file</span><br></pre></td></tr></table></figure></li></ol><ol start="12"><li><p>删除文件最后一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'$d'</span> file</span><br></pre></td></tr></table></figure></li></ol><ol start="13"><li><p>删除文件中所有开头是test的行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'/^test/'</span>d file</span><br></pre></td></tr></table></figure></li><li><p>已匹配字符串标记&amp;</p><ul><li>正则表达式 \w+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：<span class="built_in">echo</span> this is a <span class="built_in">test</span> line | sed <span class="string">'s/\w\+/[&amp;]/g'</span></span><br></pre></td></tr></table></figure><ul><li>所有以192.168.0.1开头的行都会被替换成它自已加localhost：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'s/^192.168.0.1/&amp;localhost/'</span> file</span><br><span class="line">    192.168.0.1localhost</span><br></pre></td></tr></table></figure></li></ol><ol start="15"><li><p>子串匹配标记</p><ul><li>匹配给定样式的其中一部分：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">🌰：<span class="built_in">echo</span> this is digit 7 <span class="keyword">in</span> a number | sed <span class="string">'s/digit \([0-9]\)/\1/'</span></span><br><span class="line">    this is 7 <span class="keyword">in</span> a number</span><br></pre></td></tr></table></figure><ul><li>命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 \1，依此类推匹配到的第二个结果就是 \2，例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">🌰：<span class="built_in">echo</span> aaa BBB | sed <span class="string">'s/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'</span></span><br><span class="line">    BBB aaa</span><br></pre></td></tr></table></figure><ul><li>love被标记为1，所有loveable会被替换成lovers，并打印出来：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -n <span class="string">'s/\(love\)able/\1rs/p'</span> file</span><br></pre></td></tr></table></figure></li><li><p>组合多个表达式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'表达式'</span> | sed <span class="string">'表达式'</span></span><br><span class="line">    等价于：</span><br><span class="line">    sed <span class="string">'表达式; 表达式'</span></span><br></pre></td></tr></table></figure></li><li><p>引用</p><ul><li>sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">🌰：<span class="built_in">test</span>=hello</span><br><span class="line">    <span class="built_in">echo</span> hello WORLD | sed <span class="string">"s/<span class="variable">$test</span>/HELLO"</span></span><br><span class="line">    HELLO WORLD</span><br></pre></td></tr></table></figure></li><li><p>选定行的范围：,（逗号）</p><ul><li>所有在模板test和check所确定的范围内的行都被打印：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -n <span class="string">'/test/,/check/p'</span> file</span><br></pre></td></tr></table></figure><ul><li>打印从第5行开始到第一个包含以test开始的行之间的所有行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -n <span class="string">'5,/^test/p'</span> file</span><br></pre></td></tr></table></figure><ul><li>对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'/test/,/west/s/$/aaa bbb/'</span> file</span><br></pre></td></tr></table></figure></li><li><p>多点编辑：e命令</p><ul><li>-e选项允许在同一行里执行多条命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -e <span class="string">'1,5d'</span> -e <span class="string">'s/test/check/'</span> file</span><br></pre></td></tr></table></figure><ul><li>上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</li><li>和 -e 等价的命令是 –expression：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed --expression=<span class="string">'s/test/check/'</span> --expression=<span class="string">'/love/d'</span> file</span><br></pre></td></tr></table></figure></li><li><p>从文件读入：r命令</p><ul><li>file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'/test/r file'</span> filename</span><br></pre></td></tr></table></figure></li></ol><ol start="21"><li><p>写入文件：w命令  </p><ul><li>在example中所有包含test的行都被写入file里：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -n <span class="string">'/test/w file'</span> example</span><br></pre></td></tr></table></figure></li><li><p>追加（行下）：a\命令</p><ul><li>将 this is a test line 追加到 以test 开头的行后面：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'/^test/a\this is a test line'</span> file</span><br></pre></td></tr></table></figure><ul><li>在 test.conf 文件第2行之后插入 this is a test line：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -i <span class="string">'2a\this is a test line'</span> test.conf</span><br></pre></td></tr></table></figure></li><li><p>插入（行上）：i\命令</p><ul><li>将 this is a test line 追加到以test开头的行前面：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'/^test/i\this is a test line'</span> file</span><br></pre></td></tr></table></figure><ul><li>在test.conf文件第5行之前插入this is a test line：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -i <span class="string">'5i\this is a test line'</span> test.conf</span><br></pre></td></tr></table></figure></li><li><p>下一个：n命令</p><ul><li>如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'/test/&#123; n; s/aa/bb/; &#125;'</span> file</span><br></pre></td></tr></table></figure></li></ol><ol start="25"><li><p>变形：y命令</p><ul><li>把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1,10y/abcde/ABCDE/'</span> file</span><br></pre></td></tr></table></figure></li><li><p>退出：q命令</p><ul><li>打印完第10行后，退出sed</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed <span class="string">'10q'</span> file</span><br></pre></td></tr></table></figure></li></ol><ol start="27"><li><p>保持和获取：h命令和G命令</p><ul><li>在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -e <span class="string">'/test/h'</span> -e <span class="string">'$G'</span> file</span><br></pre></td></tr></table></figure><ul><li>在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。</li></ul></li><li><p>保持和互换：h命令和x命令</p><ul><li>互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -e <span class="string">'/test/h'</span> -e <span class="string">'/check/x'</span> file</span><br></pre></td></tr></table></figure></li></ol><ol start="29"><li><p>脚本scriptfile</p><ul><li>sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed [options] -f scriptfile file(s)</span><br></pre></td></tr></table></figure></li></ol><ol start="30"><li><p>打印奇数行或偶数行</p><ul><li>方法1：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -n <span class="string">'p;n'</span> test.txt  <span class="comment">#奇数行</span></span><br><span class="line">    sed -n <span class="string">'n;p'</span> test.txt  <span class="comment">#偶数行</span></span><br></pre></td></tr></table></figure><ul><li>方法2：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">🌰：sed -n <span class="string">'1~2p'</span> test.txt  <span class="comment">#奇数行</span></span><br><span class="line">    sed -n <span class="string">'2~2p'</span> test.txt  <span class="comment">#偶数行</span></span><br></pre></td></tr></table></figure></li></ol><ol start="31"><li><p>打印匹配字符串的下一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">🌰：grep -A 1 SCC URFILE</span><br><span class="line">    sed -n <span class="string">'/SCC/&#123;n;p&#125;'</span> URFILE</span><br><span class="line">    awk <span class="string">'/SCC/&#123;getline; print&#125;'</span> URFILE</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sed </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx报错:『upstream response is buffered to a temporary file 』</title>
      <link href="/posts/3a67d943aecf0d77.html"/>
      <url>/posts/3a67d943aecf0d77.html</url>
      
        <content type="html"><![CDATA[<h3 id="需求与问题"><a href="#需求与问题" class="headerlink" title="需求与问题"></a>需求与问题</h3><p>访问新项目网站发现有静态资源获取failed，图片经常无法显示，刷新偶尔图片能显示出来。<br>查看nginx日志，有error.log报错：</p><blockquote><p>【2017/07/21 22:53:12 [warn] 22402#0: *484 an upstream response is buffered to a temporary file /var/tmp/nginx/proxy//6/01/0000000016 while reading upstream, client: 106.121.13.193, server: wap.example.com, request: “GET /source/images/applyfristbg.jpg HTTP/1.1”, upstream: “<a href="http://127.0.0.1:8081/source/images/applyfristbg.jpg&quot;" target="_blank" rel="noopener">http://127.0.0.1:8081/source/images/applyfristbg.jpg&quot;</a>, host: “wap.example.com”, referrer: “<a href="http://wap.example.com/source/css/apply-first-7ae1ca00a910468d350b293787c7e95dfbebd675.css”】" target="_blank" rel="noopener">http://wap.example.com/source/css/apply-first-7ae1ca00a910468d350b293787c7e95dfbebd675.css”】</a></p></blockquote><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><ul><li>1、是因为nginx默认的buffer太小，请求头header太大时会出现缓存不足，写入到了磁盘中，造成访问中断。</li><li>2、进而联系前端得知前端为了SEO，在header中加入和不少的中文词汇，header体积那叫一个大。</li></ul><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>因为nginx+tomcat中，nginx做的proxy，就是反向代理，所以在nginx+tomcat模式中，修改fastcgi_buffer_* 是无效的，需要修改proxy对应的buffer大小。</p><ul><li>对于php+nginx的可以设置为：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fastcgi_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line"><span class="attribute">fastcgi_buffers</span> <span class="number">6</span> <span class="number">512k</span>;</span><br><span class="line"><span class="attribute">fastcgi_busy_buffers_size</span> <span class="number">512k</span>;</span><br><span class="line"><span class="attribute">fastcgi_temp_file_write_size</span> <span class="number">512k</span>;</span><br></pre></td></tr></table></figure><ul><li>对于tomcat+nginx的可以设置为：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_buffering</span>    <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">proxy_buffer_size</span>  <span class="number">128k</span>;</span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">100</span>  <span class="number">128k</span>;</span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br></pre></td></tr></table></figure><ul><li>对于buffer实际修改的大小，需要按实际情况来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx获取request_body</title>
      <link href="/posts/e4dd5bbae50fa621.html"/>
      <url>/posts/e4dd5bbae50fa621.html</url>
      
        <content type="html"><![CDATA[<h3 id="需求与问题"><a href="#需求与问题" class="headerlink" title="需求与问题"></a>需求与问题</h3><p>工作中经常接到在nginx日志中打印出post请求的body数据的需求，也就是打印出$request_body。而直接在log_format中添加$request_body，经常会得到空值。</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>查看官网中对$request_body的描述，</p><blockquote><p>$request_body</p><blockquote><ul><li><p>request body</p><p> The variable’s value is made available in locations processed by the proxy_pass, fastcgi_pass, uwsgi_pass, and scgi_pass directives when the request body was read to a memory buffer.</p></li></ul></blockquote></blockquote><p>只有在location中用到proxy_pass, fastcgi_pass, uwsgi_pass或者scgi_pass指令时，request body才会被读取到内存缓冲区中，$request_body变量才有值。</p><p>进一步查找网上文章，request_body在未运行上面所说的proxy_pass等指令配置时，默认会被赋值为空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p r-&gt;request_body</span><br><span class="line">$<span class="number">1</span> = (<span class="keyword">ngx_http_request_body_t</span> *) <span class="number">0x0</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>nginx中读取POST数据必须要调用ngx_http_read_client_request_body()函数，而默认情况下，这个函数是不会被调用的。</p><p>遇到返回request_body为空的，如果配置没有问题，一般是没有用到上面所列出的proxy_pass等代理配置的，直接return了状态码或者静态资源。例如前端埋点记录日志，大数据部门捕获并记录request_body，拦截非法请求直接返回403并记录请求数据等等。</p><p>没有用到调用ngx_http_read_client_request_body()函数的相关指令，捕获的request_body自然是空了。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>如上所述，要捕获到正确的request_body，就必须使用调用到ngx_http_read_client_request_body()函数的指令。</p><p>通过查阅文章，有如下指令或模块：</p><ul><li>1、proxy_pass指令</li><li>2、fastcgi_pass指令</li><li>3、uwsgi_pass指令</li><li>4、scgi_pass指令</li><li>5、echo_read_request_body指令（ngx_echo模块）</li><li>6、ngx_lu模块（lua脚本）</li></ul><p>前四个属于nginx的基础配置，不在赘述，下面主要讲一下ngx_lua和echo_read_request_body的用法：</p><ul><li><p>1、利用ngx_lua模块</p>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /dump_req_log &#123;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> != POST) &#123;</span><br><span class="line">          <span class="attribute">return</span> <span class="number">405</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">lua_need_request_body</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">content_by_lua</span> <span class="string">'local request_body = ngx.var.request_body'</span>;</span><br><span class="line">    <span class="attribute">access_log</span> /data/logs/front-end/dump_req.access.log req_log_json buffer=<span class="number">32k</span> flush=<span class="number">5s</span>;</span><br></pre></td></tr></table></figure></li><li><p>2、利用ngx_echo模块</p>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /dump_req_log &#123;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> != POST) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">405</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    echo_read_request_body;</span><br><span class="line">    <span class="attribute">access_log</span> /data/logs/front-end/dump_req.access.log req_log_json buffer=<span class="number">32k</span> flush=<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>！！！需要注意的是，在使用echo_read_request_body时，与echo_read_request_body的同级配置里不能有return，否则捕获的request_body将会是空。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> request_body </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
